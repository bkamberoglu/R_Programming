## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
cor(data$sulfate, data$nitrate)
}
}
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
print(head(data$sulfate)
print(head(data$nitrate))
}
}
}
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
print(head(data$sulfate))
print(head(data$nitrate))
}
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
print(head(data))
}
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
print(head(data$id))
}
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
print(head(data[i]))
}
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
data <- complete(directory)
for (i in data$nobs) {
if (i> threshold){
print(head(data[,i]))
}
}
}
cr <- corr("specdata", 150)
head(data)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
for (i in complete$nobs) {
if (i> threshold){
data <- getmonitor(complete$id, directory)
cor(data$sulfate, data$nitrate)
}
}
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold]
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
return(output)
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
print (head(complete))
over_threshold <- complete[complete$nobs > threshold]
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
return(output)
}
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
print (head(complete$nobs))
over_threshold <- complete[complete$nobs > threshold]
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
return(output)
}
}
complete$nobs
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold,]
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
return(output)
}
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold,]
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
}
return(output)
}
return(output)
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold,]
print (head(over_threshold))
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
}
return(output)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold,]
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- cbind(output , cor(data$sulfate, data$nitrate))
}
return(output)
}
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold,]
output <- numeric(0)
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate))
}
return(output)
}
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
complete <- complete(directory)
over_threshold <- complete[complete$nobs > threshold,]
output <- numeric(0)
for(i in over_threshold$id){
data <- getmonitor(i, directory)
output <- c(output , cor(data$sulfate, data$nitrate,
use = "pairwise.complete.obs"))
}
return(output)
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
source("http://spark-public.s3.amazonaws.com/compdata/scripts/corr-test.R")
corr.testscript()
800/6500000
0.0001230769*100000
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x1 = 3
x2 = 5
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
y=12
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summary(Rprof)
x1 = c(3, 5, 9)
x2 = c(5, 7, 12)
y= c(12, 14, 16()
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summary(Rprof)
x1 = c(3, 5, 9)
x2 = c(5, 7, 12)
y= c(12, 14, 16()
y= c(12, 14, 16)
library(datasets)
y= c(12, 14, 16)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
summary(Rprof)
Rprof(){
fit <- lm(y ~ x1 + x2)
Rprof(NULL)}
Rprof(NULL)
Rprof
summary(Rprof)
Rprof(NULL)
system.time(Rprof(NULL))
system.time(fit)
summaryRprof()
?qpois
?dist
?hclust
?dist
?clust
?hclust
source('~/.active-rstudio-document', echo=TRUE)
library(plyr)
library(poweRlaw)
library(maptools)
## open zip and extract data
zz <- bzfile("repdata-data-StormData.csv.bz2", open = "r")
data <- read.csv(zz)
close(zz)
## Consolidate names of the weather events
data$EVTYPE[grep("WIND", data$EVTYPE)] <- "WIND"
data$EVTYPE[grep("TORNADO", data$EVTYPE)] <- "TORNADO"
data$EVTYPE[grep("HEAT", data$EVTYPE)] <- "HEAT"
data$EVTYPE[grep("SNOW", data$EVTYPE)] <- "SNOW"
data$EVTYPE[grep("FLOOD", data$EVTYPE)] <- "FLOOD"
## check the size of the data
print(object.size(data), units = "Mb")
## open zip and extract data
zz <- bzfile("repdata-data-StormData.csv.bz2", open = "r")
data <- read.csv(zz)
close(zz)
## Consolidate names of the weather events
data$EVTYPE[grep("WIND", data$EVTYPE)] <- "WIND"
data$EVTYPE[grep("TORNADO", data$EVTYPE)] <- "TORNADO"
data$EVTYPE[grep("HEAT", data$EVTYPE)] <- "HEAT"
data$EVTYPE[grep("SNOW", data$EVTYPE)] <- "SNOW"
data$EVTYPE[grep("FLOOD", data$EVTYPE)] <- "FLOOD"
## check the size of the data
print(object.size(data), units = "Mb")
## open zip and extract data
zz <- bzfile("repdata-data-StormData.csv.bz2", open = "r")
data <- read.csv(zz)
close(zz)
## Consolidate names of the weather events
data$EVTYPE[grep("WIND", data$EVTYPE)] <- "WIND"
data$EVTYPE[grep("TORNADO", data$EVTYPE)] <- "TORNADO"
data$EVTYPE[grep("HEAT", data$EVTYPE)] <- "HEAT"
data$EVTYPE[grep("SNOW", data$EVTYPE)] <- "SNOW"
data$EVTYPE[grep("FLOOD", data$EVTYPE)] <- "FLOOD"
## check the size of the data
print(object.size(data), units = "Mb")
zz <- bzfile("repdata-data-StormData.csv.bz2", open = "r")
setwd("~/Documents/Github/R/ReproducibleResearch/PA2")
library(plyr)
library(poweRlaw)
library(maptools)
## open zip and extract data
zz <- bzfile("repdata-data-StormData.csv.bz2", open = "r")
data <- read.csv(zz)
close(zz)
## Consolidate names of the weather events
data$EVTYPE[grep("WIND", data$EVTYPE)] <- "WIND"
data$EVTYPE[grep("TORNADO", data$EVTYPE)] <- "TORNADO"
data$EVTYPE[grep("HEAT", data$EVTYPE)] <- "HEAT"
data$EVTYPE[grep("SNOW", data$EVTYPE)] <- "SNOW"
data$EVTYPE[grep("FLOOD", data$EVTYPE)] <- "FLOOD"
## check the size of the data
print(object.size(data), units = "Mb")
## sum deaths and injuries by the event type
total_by_event <- ddply(data, .(EVTYPE), summarise, fatalities = sum(FATALITIES), injuries=sum(INJURIES))
## sort by deaths and ijuries in the descending order
sorted <- arrange(total_by_event, desc(fatalities), desc(injuries))
## remove events that made no damage (in terms of injuries or fatalities)
remove_no_damage <- sorted[(sorted$fatalities >0 & sorted$injuries > 0), ]
## Sum damage by event type
Mults <- c(M = 10^6, m = 10^6, K = 10^3, k = 10^3, B = 10^9, b = 10^9)
data$sumP <- data$PROPDMG * Mults[as.character(data$PROPDMGEX)]
data$sumP[is.na(data$sumP)] <- 0
data$sumC <- data$CROPDMG * Mults[as.character(data$CROPDMGEXP)]
data$sumC[is.na(data$sumC)] <- 0
total_by_event2 <- ddply(data, .(EVTYPE), summarise, property = sum(sumP), crops=sum(sumC))
sorted2 <- arrange(total_by_event2, desc(property), desc(crops))
## remove events that made no damage
remove_no_damage2 <- sorted2[(sorted2$property >0 & sorted2$crops > 0), ]
## Top 10 events by propery and crop damage
head(sorted2, 10)
dim(sorted2)
dim(remove_no_damage2)
## total property damage
total_property_damage <- sum(remove_no_damage2$property)
total_property_damage
## percentage of propery damage caused by tornado
top_event_property <- max(remove_no_damage2$property) /total_property_damage
top_event_property
# percentage of propery damage caused by top five events
top_five_property <- sum(remove_no_damage2$property[1:5])
top_five__property_percentage <- top_five_property /total_property_damage
top_five__property_percentage
## total crop damage
total_crop_damage <- sum(remove_no_damage2$crops)
total_crop_damage
## percentage of crop damage caused by hail
top_event_crop <- max(remove_no_damage2$crop) /total_crop_damage
top_event_crop
# percentage of propery damage caused by top five events
sort_crop <- arrange(remove_no_damage2, desc(crops))
top_five_crops <- sum(sort_crop$crops[1:5])
top_five_crops_percentage <- top_five_crops /total_crop_damage
top_five_crops_percentage
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 4e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
remove_no_damage2$crops
class(remove_no_damage2$crops)
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 4e+4, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 4e+6, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 4e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 4e+9, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
head(sort_crop)
par( mfrow = c( 1, 2 ) )
plot(remove_no_damage2$property, col="blue", pch=16, ylab="Propery Damage")
pointLabel(x=0, remove_no_damage2$property,
ifelse(remove_no_damage2$property > 1.5e+10, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
plot(remove_no_damage2$crops, col="red", pch=16, ylab="Crop Damage")
pointLabel(x=0, remove_no_damage2$crops,
ifelse(remove_no_damage2$crops > 2.5e+9, as.character(remove_no_damage2$EVTYPE), NA),
allowSmallOverlap = FALSE, cex = .7, pos=4)
